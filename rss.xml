<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>What&apos;s Up, Nick?</title>
        <link>TBC</link>
        <description>I&apos;m a tech nerd for things new and old, so here&apos;s where I come to ramble about it.</description>
        <lastBuildDate>Wed, 22 Aug 2018 21:46:03 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>grunt-blogbuilder https://github.com/matthewbdaly/grunt-blogbuilder</generator>
        <copyright>Nicholas Casteen 2018</copyright>
        <item>
            <title><![CDATA[Broken Bootloaders and Occam's Razor]]></title>
            <link>TBC/blog/2018/08/22/broken-bootloaders-and-occam&apos;s-razor/</link>
            <guid>TBC/blog/2018/08/22/broken-bootloaders-and-occam&apos;s-razor/</guid>
            <pubDate>Wed, 22 Aug 2018 08:27:02 GMT</pubDate>
            <description><![CDATA[<p><img src="/static/images/general_posts/razor/p1_intro.png" alt="Black Screen of Death"></p>
<p>From <a href="https://en.wikipedia.org/wiki/Occam%27s_razor">Wikipedia</a>:</p>
<blockquote>
<p>Occam’s razor is the problem-solving principle that the simplest solution
 tends to be the right one.</p>
</blockquote>
<p>My PC has a dualboot with 2 Operating Systems, Linux Mint and Windows 10. These
two love to bicker and fight when it comes to booting the PC, such as Safe
Boot in the BIOS favoring the Windows bootloader over GRUB or otherwise trying
to override a Linux liveboot. Even so, I still keep it this way. Linux is for
work, professional and personal, and Windows is for play (and any work that
can’t be done on Linux).</p>
<p>So the input of the commodore 64 perceptron was put off today for a little computer
fixing time, these OSes at each other’s throats again. A few days ago a brown-out 
occured in the house, shutting off my PC. The thing is a monster that I built myself, 
but its software can sometimes be a jenga tower ready to topple over.</p>
<p>When I turned my PC back on I found GRUB in shambles. That is to say it couldn’t
find, well, itself. So instead of giving me a handy list of loaders to choose from
it just went straight to GRUB Rescue, a black screen/white text shell some people
have the gall to call ‘powerful’. No, the rescue terminal is no BASH, not by a long
shot.</p>
<p><img src="/static/images/general_posts/razor/p1_glgb.png" alt="Good Luck, God Bless, We&#39;re All Rooting for You"></p>
<p>This wasn’t the first time I’ve seen this screen. When I first built my PC this happened
when I tried to load into the old Mint 17 I already had installed on my C Drive. I had
to manually start up the GRUB menu from the rescue terminal in order to get into Linux
to make sure everything was in order. Unfortunately, this time it wasn’t so simple.</p>
<p>Trying to do what I did before I hit hurdle after hurdle. First, all my drives were
unknown filesystems, meaning I had to comb through the lot of the drives to find the
one where my Linux was hiding. From there I had to set up the root and tell GRUB
where normal.mod was. Except it kept trying to look for normal in /boot/grub/i386/.</p>
<p>This was confusing consider I had a 64 bit machine, x86, not a 32 bit one. In fact, I
could even ls my way into /boot/grub/ to find normal.mod hiding in a folder called 
/x86_64-efi/. So the file was there but grub was, for some reason, looking in the wrong spot.</p>
<p>Combing through the internet, I began a tangled web of trying to fix this issue. I created
a liveUSB of Linux Mint so I could use the terminal  to reinstall grub but I needed to
mount my C drive to the /mnt/ folder in root but it’d  claim to not be able to find
a file at a specific location despite the fact I had a file  explorer open and I was
<em>staring right at the file it said it couldn’t find right where it said it couldn’t
find it</em>.</p>
<p><img src="/static/images/general_posts/razor/p1_gfdi.png" alt="Madness and Aimlessness"></p>
<p>In my mad scramble for a solution to this increasingly maddening problem, I stumbled
across a very short post in response to someone else tangled in the web of chaos
that was GRUB messing up:</p>
<blockquote>
<p>Easier just to use Boot-Repair.
Boot Repair -Also handles LVM, GPT, separate /boot and UEFI dual boot.:
<a href="https://help.ubuntu.com/community/Boot-Repair">https://help.ubuntu.com/community/Boot-Repair</a></p>
</blockquote>
<p>As it turns out, <a href="https://sourceforge.net/projects/boot-repair/">a tool called Boot Repair</a>
existed. You could load up the iso into a USB stick like a Linux liveboot, and it
even had a cute little mini-desktop where you could check your drives before
running a two-click wizard that instantly fixed it.</p>
<p>I rebooted and everything worked. GRUB menu worked just fine, both OSes boot
a-okay.</p>
<p>Terminals and file crawling and errors that make no sense while combing through
forum post after forum post…</p>
<p>versus a USBstick and two clicks.</p>
<p>Occam’s Razor holds true, as it turns out. It’s just a shame it also makes me feel like
a proper idiot.</p>
<p>~Nicko</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Machine Learning on a Commodore64 (Part 1)]]></title>
            <link>TBC/blog/2018/08/19/machine-learning-on-a-commodore64-(part-1)/</link>
            <guid>TBC/blog/2018/08/19/machine-learning-on-a-commodore64-(part-1)/</guid>
            <pubDate>Sun, 19 Aug 2018 21:11:11 GMT</pubDate>
            <description><![CDATA[<p><img src="/static/images/retro_posts/c64_learning/p1_intro.png" alt="The Future In The Past"></p>
<p>Recently I downloaded <a href="http://www.ccs64.com/">an Emulator for the Commodore 64</a>
and was also reminded of the fact that anachronisms are funny. This is why, when
trying to think of projects to tackle with this old thing, I thought it’d be fun
to see how far I could take Machine Learning on the ol’ 6510 Processor.</p>
<p>I, myself, own a VIC-20. I haven’t brought it out of its box for a long while,
having been distracted by other things, so my BASIC is a little rusty. So, what
better way to start this project than to try and implement one of the more simple
learning machines, the Perceptron. Old methods for old machines.</p>
<p><img src="/static/images/retro_posts/c64_learning/nicvic20.jpg" alt="Nic and the Vic"></p>
<p>Should this work, I’d like to see just how far I can go. I’m doubtful I’ll be able
to go much further without breaking into C64 Machine Code (which I may very well
do). My ultimate goal is to have this running on my Vic-20, so for now this is
just a proof of concept, sorta. As in, if the C64 can’t do it, the poor Vic sure
can’t.</p>
<p>This first version of this will be simple, manually inputting training values with
expected output. The skeleton roadmap is as follows:  </p>
<p><img src="/static/images/retro_posts/c64_learning/p1_pc1.png" alt="Code 01"></p>
<p>Here, I’m doing an easy version of the perceptron. No input_0 &amp; weight_0, I’m
opting for a regular bias. Also, I decided to keep the learning rate at 1 so
I’m not including it in the math.</p>
<p>The hiccup here is “what format does data come in”? Well, again, for simplicity
I’ll probably keep it as a string of 1s and 0s and it’ll be binary classification.
With a string, we can break it into a list of chars and do a VAL(X$) on each to
get their numeric value. For each one. It’s sloppy, but it <em>should</em> get the job done.</p>
<p>As for reconnecting with Commodore BASIC, most videos were a little slow paced,
feeling first the need to explain “no there isn’t a mouse” and “no you can’t get
Windows on C64” before explaining and re-explaining the history of the processor.
Thankfully, I’m able to kick it like it’s the early 80s and read from the user’s
manual quick reference for the C64 (an online scan, of course).</p>
<p>For my first hack at it, I wrote this out:</p>
<p><img src="/static/images/retro_posts/c64_learning/p1_c1.png" alt="Code 01"></p>
<p>Again, my BASIC V2 is really rusty so I’m probably missing something here. There’s
a lot of string to real conversion knocking about in this code which makes me nervous.
That was the easiest way to break apart a string of 1s and 0s. I’d do a little
magic with mod10, but if the string began with a 0 I’m worried it’d be lost
(ie 0101 becomes 101). Else it’d just halt the program. I’ll give it a try in
the emulator when I have time tomorrow.</p>
<p>~Nicko</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Welcome to the Blog!]]></title>
            <link>TBC/blog/2018/08/16/test-post!/</link>
            <guid>TBC/blog/2018/08/16/test-post!/</guid>
            <pubDate>Thu, 16 Aug 2018 09:18:23 GMT</pubDate>
            <description><![CDATA[<p>Heya!</p>
<p>This is Nicholas Casteen reporting in. This is my dumping ground for any and<br>everything I feel like sharing. From new additions to my retro collection to<br>progress reports on programming challenges I’ve taken, there’s a fair bit to<br>see here!</p>
<p>I’ve got a link to my github on the sidebar. Hopefully I’ll also have some<br>‘Github Project Progress’ thing there, too. This here blog’s nothing if not<br>a work in progress.</p>
<p>And, of course, if ever you want to learn more about the author or get in<br>contact, check the ‘About’ and ‘Contact Me’ pages up in the top!</p>
<p>S’all for now,<br>Nicko</p>
]]></description>
        </item>
    </channel>
</rss>